package dal.concrete.mysql;

import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import pojo.Sector;

import dal.annotations.Column;
import dal.annotations.Storeable;
import dal.connection.ConnectionManager;

public  class AbstractDAO<T> {

	private Class<?> className;
	
	public AbstractDAO(Class<?> klass) {
		className = klass;
	}
	
	private String createAttributesString() {
		StringBuilder builder = new StringBuilder();
		
		builder.append("(");
		
		String prefix = "";
		for (Field field: className.getDeclaredFields()) {	
			Column col = field.getAnnotation(Column.class);
			
			if (col.autoGenerated())
				continue;
			
			if (col != null) {
				builder.append(prefix);
				prefix = ", ";
				builder.append(field.getName());
			}
		}
		
		builder.append(")");
		
		return builder.toString();
	}

	
	private String createStringToAdd(T object) {
		StringBuilder builder = new StringBuilder();
		
		builder.append("(");
		
		String prefix = "";
		for (Field field: className.getDeclaredFields()) {			
			Column col = field.getAnnotation(Column.class);
						
			if (col.autoGenerated())
				continue;
						
			if (col != null) {
				
				try {
					builder.append(prefix);
					prefix = ", ";
					field.setAccessible(true);
					Object obj = field.get(object);
					field.setAccessible(false);
					
					if (field.getType() == String.class)
						builder.append("'");
					
					builder.append(obj.toString());
					
					if (field.getType() == String.class)
						builder.append("'");
					
				} catch (IllegalArgumentException e) {
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					e.printStackTrace();
				}
			}
		}
		
		builder.append(")");
		
		return builder.toString();
	}
	
	public String getTableName() {
		return className.getAnnotation(Storeable.class).tableName();
	}
	
	public List<T> getByAttributes(HashMap<String, Object> attrs) throws SQLException, ClassNotFoundException {
		Connection conn = ConnectionManager.getConnection();
		ArrayList<T> result = new ArrayList<T>();
		
		Statement statement = null;
        
        statement = conn.createStatement();
        
        String queryString = "Select * from " + getTableName() + " where " + generateCompareString(attrs);
        
        System.out.println(queryString);
               
        ResultSet rs = statement.executeQuery(queryString);
        
		try {
			while (rs.next()) {
				T obj = (T) className.newInstance();
	
				for (Field field : className.getDeclaredFields()) {
					Column col = field.getAnnotation(Column.class);
	
					if (col != null) {
						field.setAccessible(true);
						field.set(obj, rs.getObject(col.columnName()));
						field.setAccessible(false);
					}
				}
				
				result.add(obj);
			}
		} catch (InstantiationException e){
			e.printStackTrace();
		}		
		catch (IllegalAccessException e) {
			e.printStackTrace();
		}
        
        rs.close();
        
        return result;
	}
	
	private String generateCompareString(T newObject) {
		StringBuilder builder = new StringBuilder();
				
		String prefix = "";
		for (Field field: className.getDeclaredFields()) {			
			Column col = field.getAnnotation(Column.class);
			
			if (col != null) {
				try {
					builder.append(prefix);
					prefix = " and ";
					field.setAccessible(true);
					Object obj = field.get(newObject);
					field.setAccessible(false);
					
					builder.append(field.getName() + "=");
					
					if (field.getType() == String.class)
						builder.append("'");
					
					builder.append(obj.toString());
					
					if (field.getType() == String.class)
						builder.append("'");
					
				} catch (IllegalArgumentException e) {
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					e.printStackTrace();
				}
			}
		}
				
		return builder.toString();	
	}
	
	private String generateCompareString(HashMap<String, Object> attrs) {
		StringBuilder builder = new StringBuilder();
		
		String prefix = "";
		for (Field field: className.getDeclaredFields()) {			
			Column col = field.getAnnotation(Column.class);
						
			if (col != null) {
				try {
					Object obj = attrs.get(field.getName());
					
					if (obj == null)
						continue;
					
					builder.append(prefix);
					prefix = " and ";
					
					builder.append(field.getName() + "=");
					
					if (field.getType() == String.class)
						builder.append("'");
					
					builder.append(obj.toString());
					
					if (field.getType() == String.class)
						builder.append("'");
					
				} catch (IllegalArgumentException e) {
					e.printStackTrace();
				}
			}
		}
				
		return builder.toString();
	}

	public void create(T object) throws ClassNotFoundException, SQLException {
		Connection conn = ConnectionManager.getConnection();
		
		Statement statement = null;
        int updateQuery = 0;
        
        statement = conn.createStatement();
        
        String queryString = "Insert into " + getTableName() + " " + createAttributesString() + " values " + createStringToAdd(object);
        System.out.println(queryString);                
        
        updateQuery = statement.executeUpdate(queryString);
        
        if (updateQuery != 0) {
        	System.out.println("Hue");
        }
	}
	
	public List<T> getAll() throws ClassNotFoundException, SQLException {
		Connection conn = ConnectionManager.getConnection();
		ArrayList<T> result = new ArrayList<T>();
		
		Statement statement = null;
        
        statement = conn.createStatement();
        
        String queryString = "Select * from " + getTableName();
               
        ResultSet rs = statement.executeQuery(queryString);
        
        while (rs.next()) {
        	try {
				T obj = (T) className.newInstance();
				
	            for (Field field: className.getDeclaredFields()) {			
	    			Column col = field.getAnnotation(Column.class);
	    			
	    			if (col != null) {
	    				field.setAccessible(true);
	    				field.set(obj, rs.getObject(col.columnName()));
	    				field.setAccessible(false);
	    			}
	    		}
	            
	            result.add(obj);
			} catch (InstantiationException e){
				e.printStackTrace();
			}catch(IllegalAccessException e) {
				e.printStackTrace();
			}
        }
        
        rs.close();
        
        return result;
    }

	public void update(T oldObject, T newObject) throws ClassNotFoundException, SQLException {
		Connection conn = ConnectionManager.getConnection();
		
		Statement statement = null;
        int updateQuery = 0;
        
        statement = conn.createStatement();
        
        String queryString = "Update " + getTableName() + " set " + updateStringToAdd(newObject) 
        	+ " where " + generateCompareString(oldObject);
        System.out.println(queryString);            
        
        updateQuery = statement.executeUpdate(queryString);
        
        if (updateQuery != 0) {
        	System.out.println("Hue");
        }
	}

	private String updateStringToAdd(T newObject) {
		StringBuilder builder = new StringBuilder();
				
		String prefix = "";
		for (Field field: className.getDeclaredFields()) {			
			Column col = field.getAnnotation(Column.class);
						
			if (col.autoGenerated())
				continue;
			
			if (col != null) {
				try {
					builder.append(prefix);
					prefix = " , ";
					field.setAccessible(true);
					Object obj = field.get(newObject);
					field.setAccessible(false);
					
					builder.append(field.getName() + "=");
					
					if (field.getType() == String.class)
						builder.append("'");
					
					builder.append(obj.toString());
					
					if (field.getType() == String.class)
						builder.append("'");
					
				} catch (IllegalArgumentException e) {
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					e.printStackTrace();
				}
			}
		}
				
		return builder.toString();	
	}

	public void delete(T object) throws ClassNotFoundException, SQLException {
		Connection conn = ConnectionManager.getConnection();
		
		Statement statement = null;
        int updateQuery = 0;
        
        statement = conn.createStatement();
        
        String queryString = "Delete from " + getTableName() + " where " + generateCompareString(object);
        System.out.println(queryString);            
        
        updateQuery = statement.executeUpdate(queryString);
        
        if (updateQuery != 0) {
        	System.out.println("Hue");
        }
	}
	
	public void deleteAll() throws ClassNotFoundException, SQLException {
		Connection conn = ConnectionManager.getConnection();
		
		Statement statement = null;
        int updateQuery = 0;
        
        statement = conn.createStatement();
        
        String queryString = "Delete from " + getTableName();
        System.out.println(queryString);            
        
        updateQuery = statement.executeUpdate(queryString);
        
        if (updateQuery != 0) {
        	System.out.println("Hue");
        }
	}
	
/*	public static void main(String[] args) throws ClassNotFoundException, SQLException {
		AbstractDAO<Sector> abdao = new AbstractDAO<Sector>(Sector.class);

		//criando setor
		Sector sector = new Sector();
		sector.setName("Departamento bolado");
		sector.setDescription("Muito bolado mesmo hu3");
		abdao.create(sector);
	
		System.out.println("=====================");
		
        for (Sector s: abdao.getAll())
        	System.out.println(s.toString());

		//criando outro setor
		Sector sector2 = new Sector();
		sector2.setName("Dpto");
		sector2.setDescription("hu3");
		abdao.create(sector2);
		
		System.out.println("=====================");
		
        for (Sector s: abdao.getAll())
        	System.out.println(s.toString());
        
		System.out.println("=====================");

		//pesquisar setor cujo nome = 'Dpto'
		HashMap<String, Object> attrs = new HashMap<String, Object>();
		attrs.put("name", "Dpto");
		Sector pesquisado = abdao.getByAttributes(attrs).get(0);
		
		System.out.println("Pesquisado: " + pesquisado);
		
		//pesquisando id que nao existe
		HashMap<String, Object> attrs2 = new HashMap<String, Object>();
		attrs2.put("id", 5000);
		assert abdao.getByAttributes(attrs2).isEmpty();
				
		System.out.println("=====================");
		
        for (Sector s: abdao.getAll())
        	System.out.println(s.toString());
        
		System.out.println("=====================");

		Sector novo = new Sector();
		novo.setName("Dpto atualizado");
		novo.setDescription("atualizado");
				
		abdao.update(pesquisado, novo);
		
		System.out.println("=====================");
		
        for (Sector s: abdao.getAll())
        	System.out.println(s.toString());
        
		System.out.println("=====================");

		System.out.println("Apagando tudo");
        
        abdao.deleteAll();
        
		System.out.println("=====================");
        
        for (Sector s: abdao.getAll())
        	System.out.println(s.toString());
        	
    	System.out.println("=====================");
	}*/
}

